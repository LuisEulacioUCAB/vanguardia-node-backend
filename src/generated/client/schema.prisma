generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model blogs {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model cards {
  id                 BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime? @db.Timestamp(0)
  credit_card_number String?   @db.VarChar(255)
  expiration_year    String?   @db.VarChar(255)
  expiration_month   String?   @db.VarChar(255)
  brand              String?   @db.VarChar(255)
  card_holder_name   String?   @db.VarChar(255)
  customer_card_id   String?   @db.VarChar(255)
  user_id            BigInt?   @db.UnsignedBigInt
  primary            Boolean   @default(false)
}

model invoices {
  id              BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  created_at      DateTime?       @db.Timestamp(0)
  updated_at      DateTime?       @db.Timestamp(0)
  payment_method  String?         @db.VarChar(255)
  transaction_id  String?         @db.VarChar(255)
  total           Float
  status          invoices_status @default(PROCESSING)
  user_id         BigInt?         @db.UnsignedBigInt
  subscription_id BigInt?         @db.UnsignedBigInt
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model notifications {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(5)
  updated_at DateTime? @db.Timestamp(5)
  message    String    @db.VarChar(255)
  user_id    BigInt?   @db.UnsignedBigInt
}

model subscriptions {
  id              BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  created_at      DateTime?            @db.Timestamp(0)
  updated_at      DateTime?            @db.Timestamp(0)
  name            String?              @db.VarChar(255)
  description     String?              @db.VarChar(255)
  start_date      String?              @db.VarChar(255)
  end_date        String?              @db.VarChar(255)
  user_id         BigInt?              @db.UnsignedBigInt
  subscription_id String?              @db.VarChar(255)
  status          subscriptions_status
}

model user_social_providers {
  id           Int              @id @default(autoincrement())
  created_at   DateTime?        @default(now()) @db.Timestamp(0)
  updated_at   DateTime?        @default(now()) @db.Timestamp(0)
  provider     social_providers @default(SYSTEM)
  user_id      Int              @default(0)
  url_register String           @db.VarChar(255)
  provider_id  String?          @db.VarChar(255)
  users        users?           @relation(fields: [user_id], references: [id])
}

model users {
  id                Int                     @id @default(autoincrement())
  name              String                  @db.Text
  email             String                  @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?               @db.Timestamp(0)
  password          String                  @default("") @db.VarChar(255)
  remember_token    String?                 @db.VarChar(100)
  created_at        DateTime?               @default(now()) @db.Timestamp(0)
  updated_at        DateTime?               @default(now()) @db.Timestamp(0)
  avatar            String?                 @db.LongText
  sex               users_sex               @default(NO_APPLY)
  birthday          String?                 @db.VarChar(255)
  role              user_roles?             @relation(fields: [role_id], references: [id])
  role_id           Int?
  social_providers  user_social_providers[]
}

model password_reset {
  id         Int       @id @default(autoincrement())
  email      String    @db.LongText
  token      String    @db.LongText
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  expired_at DateTime? @default(now()) @db.Timestamp(0)
}

model user_roles {
  id    Int     @id @default(autoincrement())
  name  roles
  users users[]
}

enum invoices_status {
  COMPLETED
  PROCESSING
  FAILED
}

enum subscriptions_status {
  active
  canceled
  expired
  future
  in_trial
  live
}

enum users_sex {
  FEMALE
  MALE
  NO_APPLY
}

enum roles {
  SUPER_ADMINISTRATOR
  ADMINISTRATOR
  USER
  EDITOR
}

enum social_providers {
  SYSTEM
  GOOGLE
  FACEBOOK
  APPLE
}
